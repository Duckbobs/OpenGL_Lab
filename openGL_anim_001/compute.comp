#version 450 core

layout(local_size_x = 1) in;

struct InsData {
	vec3 Position;
	vec3 Scale;
	vec3 Rotation;
	mat4 aInstanceMatrix;
};
layout(binding = 0) coherent buffer ssbo1 {
    float fdata[];
};
mat4 translate(mat4 m, vec3 v)
{
	mat4 Result = m;
	Result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];
	return Result;
}
mat4 scale(mat4 m, vec3 v)
{
	mat4 Result;
	Result[0] = m[0] * v[0];
	Result[1] = m[1] * v[1];
	Result[2] = m[2] * v[2];
	Result[3] = m[3];
	return Result;
}
mat4 rotate(mat4 m, float angle, vec3 v)
{
	float a = angle;
	float c = cos(a);
	float s = sin(a);

	vec3 axis = normalize(v);
	vec3 temp = (float(1) - c) * axis;

	mat4 Rotate;
	Rotate[0][0] = c + temp[0] * axis[0];
	Rotate[0][1] = temp[0] * axis[1] + s * axis[2];
	Rotate[0][2] = temp[0] * axis[2] - s * axis[1];

	Rotate[1][0] = temp[1] * axis[0] - s * axis[2];
	Rotate[1][1] = c + temp[1] * axis[1];
	Rotate[1][2] = temp[1] * axis[2] + s * axis[0];

	Rotate[2][0] = temp[2] * axis[0] + s * axis[1];
	Rotate[2][1] = temp[2] * axis[1] - s * axis[0];
	Rotate[2][2] = c + temp[2] * axis[2];

	mat4 Result;
	Result[0] = m[0] * Rotate[0][0] + m[1] * Rotate[0][1] + m[2] * Rotate[0][2];
	Result[1] = m[0] * Rotate[1][0] + m[1] * Rotate[1][1] + m[2] * Rotate[1][2];
	Result[2] = m[0] * Rotate[2][0] + m[1] * Rotate[2][1] + m[2] * Rotate[2][2];
	Result[3] = m[3];
	return Result;
}

void main(){
	InsData data;
	uint f = 0;
	float len = fdata.length();
	uint mx, my;
	vec3 rotX = vec3(1.0f, 0.0f, 0.0f);
	vec3 rotY = vec3(0.0f, 1.0f, 0.0f);
	vec3 rotZ = vec3(0.0f, 0.0f, 1.0f);
	mat4 modelMat =  mat4(1.0f);

	for(uint pos = 0; pos < len; ) {
		f = pos;
		data.Position = vec3(fdata[f++], fdata[f++], fdata[f++]);
		data.Scale = vec3(fdata[f++], fdata[f++], fdata[f++]);
		data.Rotation = vec3(fdata[f++], fdata[f++], fdata[f++]);
		data.aInstanceMatrix = mat4(
			vec4(fdata[f++], fdata[f++], fdata[f++], fdata[f++]),
			vec4(fdata[f++], fdata[f++], fdata[f++], fdata[f++]),
			vec4(fdata[f++], fdata[f++], fdata[f++], fdata[f++]),
			vec4(fdata[f++], fdata[f++], fdata[f++], fdata[f++])
		);
		mat4 model = modelMat;
		model = translate(model, data.Position);
		model = scale(model, data.Scale);
		model = rotate(model, data.Rotation.x, rotX);
		model = rotate(model, data.Rotation.y, rotY);
		model = rotate(model, data.Rotation.z, rotZ);
		data.aInstanceMatrix = model;
		
		f = pos;
		fdata[f++] = data.Position.x;
		fdata[f++] = data.Position.y;
		fdata[f++] = data.Position.z;
		fdata[f++] = data.Scale.x;
		fdata[f++] = data.Scale.y;
		fdata[f++] = data.Scale.z;
		fdata[f++] = data.Rotation.x;
		fdata[f++] = data.Rotation.y;
		fdata[f++] = data.Rotation.z;
		for(mx = 0; mx < 4; ++mx) {
			for(my = 0; my < 4; ++my) {
				fdata[f++] = data.aInstanceMatrix[mx][my];
			}
		}
		pos = f;
	}

}

